#!/bin/bash
set -e

#------------------------------------------------------
# 0. Define Jenkins install directory dynamically
#    This will be /home/<username>/jenkins if non-root,
#    or /root/jenkins if running as root.
#------------------------------------------------------
USER_HOME="$(eval echo ~${SUDO_USER:-$USER})"
JENKINS_DIR="$USER_HOME/jenkins"
echo "Jenkins install directory: $JENKINS_DIR"

#------------------------------------------------------
# 1. Install Java 21 Amazon Corretto (only if Java < 17)
#------------------------------------------------------
echo "Checking Java version..."
if ! command -v java &>/dev/null; then
  echo "No Java detected. Installing Java 21 Amazon Corretto..."
  wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
  sudo apt-get update -y
  sudo apt-get install -y java-21-amazon-corretto-jdk
  echo "Java 21 Amazon Corretto installed."
else
  CURRENT_VERSION_RAW="$(java -version 2>&1 | awk -F\" '/version/ {print $2}')"
  MAJOR_VERSION="$(echo "$CURRENT_VERSION_RAW" | cut -d'.' -f1)"
  if [[ "$MAJOR_VERSION" =~ ^[0-9]+$ ]]; then
    if [ "$MAJOR_VERSION" -lt 17 ]; then
      echo "Detected Java version: $CURRENT_VERSION_RAW (major: $MAJOR_VERSION). Installing Java 21 Amazon Corretto..."
      wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
      sudo apt-get update -y
      sudo apt-get install -y java-21-amazon-corretto-jdk
      echo "Java 21 Amazon Corretto installed."
    else
      echo "Java version is $CURRENT_VERSION_RAW (>=17). No need to install Corretto."
    fi
  else
    echo "Could not parse Java version from: $CURRENT_VERSION_RAW"
    echo "Installing Java 21 Amazon Corretto as fallback..."
    wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
    sudo apt-get update -y
    sudo apt-get install -y java-21-amazon-corretto-jdk
    echo "Java 21 Amazon Corretto installed."
  fi
fi

#------------------------------------------------------
# 2. Install Docker if not already installed
#------------------------------------------------------
if ! command -v docker &>/dev/null; then
  echo "Installing Docker..."
  sudo apt-get update -y
  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release

  # Add Dockerâ€™s official GPG key
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

  # Set up the stable Docker repository
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io

  # Add the current user (e.g., ubuntu) to the docker group
  sudo usermod -aG docker $USER

  # Enable & start Docker
  sudo systemctl enable docker
  sudo systemctl start docker
  echo "Docker installed successfully."
else
  echo "Docker is already installed."
fi

#------------------------------------------------------
# 3. Create Jenkins directory structure (user-agnostic)
#------------------------------------------------------
echo "Creating Jenkins directory at $JENKINS_DIR"
sudo mkdir -p "$JENKINS_DIR"
sudo chown -R "$(whoami)":"$(whoami)" "$JENKINS_DIR"

cd "$JENKINS_DIR"

#------------------------------------------------------
# 4. Create Dockerfile
#------------------------------------------------------
cat <<'EOF' > Dockerfile
# Use the official Jenkins LTS image as a base
FROM jenkins/jenkins:lts

# Switch to root if you need to install extra packages
USER root

# (Optional) Install additional dependencies here
# RUN apt-get update && apt-get install -y \
#     curl \
#     git \
#     ... \
#     && apt-get clean

# Switch back to Jenkins user
USER jenkins

# Expose the standard Jenkins ports
EXPOSE 8080
EXPOSE 50000

# Define a VOLUME for Jenkins home directory (so data is not lost)
VOLUME ["/var/jenkins_home"]
EOF

echo "Dockerfile created."

#------------------------------------------------------
# 5. Build Docker image
#------------------------------------------------------
echo "Building Docker image: jenkins-master..."
sudo docker build -t jenkins-master .

#------------------------------------------------------
# 6. Ensure jenkins_home folder and fix permissions
#------------------------------------------------------
mkdir -p "$JENKINS_DIR/jenkins_home"
sudo chown -R 1000:1000 "$JENKINS_DIR/jenkins_home"

#------------------------------------------------------
# 7. Run the Jenkins container (remove old one if exists)
#------------------------------------------------------
docker rm -f jenkins-master-container 2>/dev/null || true

echo "Running Jenkins container (jenkins-master-container)..."
sudo docker run -d \
  --name jenkins-master-container \
  --restart unless-stopped \
  -p 8080:8080 \
  -p 50000:50000 \
  -v "$JENKINS_DIR/jenkins_home":/var/jenkins_home \
  jenkins-master

#------------------------------------------------------
# 8. Poll for the Jenkins initial admin password
#------------------------------------------------------
echo "Container started. Polling every 5 seconds (up to 2 minutes) for Jenkins to be ready..."

MAX_ATTEMPTS=24  # 24 attempts * 5 sec = 120 sec total
INITIAL_ADMIN_PASSWORD=""

for (( i=1; i<=$MAX_ATTEMPTS; i++ )); do
  if INITIAL_ADMIN_PASSWORD=$(sudo docker exec jenkins-master-container cat /var/jenkins_home/secrets/initialAdminPassword 2>/dev/null); then
    echo "===================================================="
    echo "Jenkins is up and running!"
    echo "Initial Admin Password: $INITIAL_ADMIN_PASSWORD"
    echo "===================================================="
    break
  else
    echo "[$i/$MAX_ATTEMPTS] Waiting for Jenkins to be up and running..."
    sleep 5
  fi
done

if [ -z "$INITIAL_ADMIN_PASSWORD" ]; then
  echo "ERROR: Timed out after 2 minutes. Jenkins did not start or the password file isn't available."
  exit 1
fi

echo "Jenkins setup complete. Access it via http://<EC2-Public-IP>:8080"